// Generated by CoffeeScript 1.11.1
var Builder, NamedFunction, OneOf, Property, Tracer, Type, ValidationMixin, Validator, isDev, isType, noKind, setKind, setType, sync, targets;

NamedFunction = require("NamedFunction");

Validator = require("Validator");

Property = require("Property");

setKind = require("setKind");

Builder = require("Builder");

setType = require("setType");

Tracer = require("tracer");

isType = require("isType");

OneOf = require("OneOf");

isDev = require("isDev");

sync = require("sync");

Type = NamedFunction("Type", function(name, func) {
  var self;
  self = Type.Builder(name, func);
  isDev && (self._tracer = Tracer("Type()", {
    skip: 1
  }));
  self.didBuild(function(type) {
    return setType(type, Type);
  });
  return self;
});

module.exports = setKind(Type, Function);

Type.Mixin = Builder.Mixin;

Type.Builder = require("./TypeBuilder");

targets = [Type.prototype, Validator.prototype, Function, Object, Array, String, Boolean, Number, RegExp, Date, Error, Symbol];

noKind = OneOf([Array, String, Boolean, Number, RegExp, Date, Symbol]);

ValidationMixin = require("./ValidationMixin");

sync.each(ValidationMixin, function(config, key) {
  var i, j, len, len1, prop, target;
  prop = isType(config, Object) ? Property(config) : Property({
    value: config
  });
  isDev && (prop.hidden = true);
  if (key === "Kind") {
    for (i = 0, len = targets.length; i < len; i++) {
      target = targets[i];
      if (!noKind.test(target)) {
        prop.define(target, key);
      }
    }
    return;
  }
  for (j = 0, len1 = targets.length; j < len1; j++) {
    target = targets[j];
    prop.define(target, key);
  }
});
