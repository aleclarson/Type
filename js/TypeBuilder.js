// Generated by CoffeeScript 1.12.4
var Arguments, Builder, Either, NamedFunction, TypeBuilder, assertType, createArguments, define, emptyFunction, frozen, isDev, isType, setKind, setType, sync;

frozen = require("Property").frozen;

NamedFunction = require("NamedFunction");

emptyFunction = require("emptyFunction");

assertType = require("assertType");

Arguments = require("Arguments");

Builder = require("Builder");

setKind = require("setKind");

setType = require("setType");

Either = require("Either");

isType = require("isType");

define = require("define");

isDev = require("isDev");

sync = require("sync");

TypeBuilder = NamedFunction("TypeBuilder", function(name) {
  var self;
  self = Builder(name);
  self._phases.args = [];
  return setType(self, TypeBuilder);
});

module.exports = setKind(TypeBuilder, Builder);

define(TypeBuilder.prototype, {
  createArgs: function(create) {
    this._phases.args.push(create);
  },
  defineArgs: function(config) {
    var args;
    if (this._args) {
      throw Error("Cannot call 'defineArgs' more than once!");
    }
    assertType(config, Either(Function, Object, Array));
    args = isType(config, Function) ? createArguments(config()) : Arguments(config);
    frozen.define(this, "_args", {
      value: args
    });
    if (!args.isArray) {
      this.defineStatics({
        optionTypes: {
          value: args.types
        }
      });
    }
    this._phases.args.push(function(values) {
      var error;
      values = args.initialize(values);
      if (isDev) {
        error = args.validate(values);
        if (error) {
          throw error;
        }
      }
      if (args.isArray) {
        return values;
      }
      return [values];
    });
  }
});

define(TypeBuilder.prototype, {
  __createArgBuilder: function() {
    var argPhases, buildArgs;
    argPhases = this._phases.args;
    if (argPhases.length === 0) {
      return emptyFunction.thatReturnsArgument;
    }
    return buildArgs = function(initialArgs, context) {
      var arg, args, i, j, k, len, len1, phase;
      args = new Array(initialArgs.length);
      for (i = j = 0, len = initialArgs.length; j < len; i = ++j) {
        arg = initialArgs[i];
        args[i] = arg;
      }
      for (k = 0, len1 = argPhases.length; k < len1; k++) {
        phase = argPhases[k];
        args = phase.call(context, args);
      }
      return args;
    };
  }
});

createArguments = function(config) {
  var args, key, value;
  assertType(config, Object);
  args = Arguments.Builder();
  for (key in config) {
    value = config[key];
    (value != null) && args.set(key, value);
  }
  return args.build();
};
